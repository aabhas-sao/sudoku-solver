{"version":3,"sources":["components/cell.tsx","utils/sudokuSolver.ts","utils/createDefaultGrid.ts","components/controlPanel.tsx","utils/validMovement.ts","components/board.tsx","utils/controls.ts","utils/validateProblem.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","num","idx","selectedCell","className","canPlace","i","j","n","grid","tobePlaced","k","x","Math","sqrt","startRow","floor","startCol","p","q","sudokuHelper","sudokuSolver","gridCopy","slice","nums","createDefaultGrid","rows","push","ControlPanel","handleSolve","reset","id","onClick","validMovement","r","c","Board","gridDefault","useState","setGrid","selectedRow","setSelectedRow","selectedCol","setSelectedCol","handlePress","e","indexOf","key","prevState","map","row","item","parseInt","horizontalValue","handleHorizontalMovement","verticalValue","handleVerticalMovement","useEffect","document","addEventListener","removeEventListener","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","valid","forEach","toBePlaced","validateProblem","solvedGrid","toast","progress","undefined","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2QASaA,EAAwB,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,aAC7C,OAAQA,EAAa,KAAOD,EAAI,IAAMC,EAAa,KAAOD,EAAI,GAC5D,qBAAKE,UAAU,gBAAf,SACU,IAARH,EAAY,GAAIA,IAElB,sBAAKG,UAAU,OAAf,cACU,IAARH,EAAY,GAAIA,M,MCfjB,SAASI,EAASC,EAAWC,EAAWC,EAAWC,EAAiBC,GAEvE,IAAK,IAAIC,EAAY,EAAGA,EAAIH,EAAGG,IAC3B,GAAGF,EAAKH,GAAGK,KAAOD,GAAcD,EAAKE,GAAGJ,KAAOG,EAAY,OAAO,EAMtE,IAHA,IAAIE,EAAIC,KAAKC,KAAKN,GACdO,EAAmBF,KAAKG,MAAMV,EAAIM,GAAKA,EACvCK,EAAmBJ,KAAKG,MAAMT,EAAIK,GAAKA,EAClCM,EAAIH,EAAUG,EAAIH,EAAWH,EAAGM,IACrC,IAAK,IAAIC,EAAIF,EAAUE,EAAIF,EAAWL,EAAGO,IACrC,GAAGV,EAAKS,GAAGC,KAAOT,EAAY,OAAO,EAI7C,OAAO,EAGX,SAASU,EAAad,EAAWC,EAAWC,EAAWC,GAEnD,GAAGH,GAAKE,EACJ,OAAO,EAIX,GAAGD,GAAKC,EACJ,OAAOY,EAAad,EAAI,EAAG,EAAGE,EAAGC,GAIrC,GAAkB,IAAfA,EAAKH,GAAGC,GAAU,CACjB,IAAK,IAAII,EAAI,EAAGA,GAAKH,EAAGG,IAAK,CACzB,GAAGN,EAASC,EAAGC,EAAGC,EAAGC,EAAME,GAGvB,GAFAF,EAAKH,GAAGC,GAAKI,EACeS,EAAad,EAAGC,EAAI,EAAGC,EAAGC,GACrC,OAAO,EAKhC,OADAA,EAAKH,GAAGC,GAAK,GACN,EAEP,OAAOa,EAAad,EAAGC,EAAI,EAAGC,EAAGC,GAIlC,IAAMY,EAAe,SAACb,EAAWC,GACpC,IAAIa,EAAWb,EAAKc,QAEpB,OADAH,EAAa,EAAG,EAAGZ,EAAGc,GACfA,G,OC/CEE,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEhDC,EAAsC,WAI/C,IAHA,IAAMC,EAAiB,GACjBjB,EAAmB,GAEhBH,EAAI,EAAGA,EARa,EAQEA,IAC3BoB,EAAKC,KAAK,GAGd,IAAK,IAAIrB,EAAI,EAAGA,EAZa,EAYEA,IAC3BG,EAAKkB,KAAKD,EAAKH,SAGnB,OAAOd,GCREmB,G,MAAgC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,MACxD,OAAQ,sBAAKC,GAAG,gBAAR,UACJ,oBAAI3B,UAAU,QAAd,2BACA,uBACA,oCACI,0CACA,uBACA,uBAAMA,UAAU,gBAAhB,UACI,sBAAKA,UAAU,eAAf,UACI,yCADJ,IACiB,sBAAMA,UAAU,kBAAhB,gBADjB,IAC6D,yCACzD,uBAAM,uBACN,yDAEJ,uBAAM,uBAAM,uBACZ,sBAAKA,UAAU,eAAf,UACI,yCADJ,IACiB,sBAAMA,UAAU,kBAAhB,gBACb,yCAAY,sBAAMA,UAAU,kBAAhB,gBAFhB,IAE4D,wCACxD,uBAAM,uBACN,2DAEJ,uBAAK,uBACL,sBAAKA,UAAU,eAAf,0CAEI,oBAAGA,UAAU,aAAb,UACI,uBADJ,gDAII,uBAJJ,sDAUZ,wBAAQ4B,QAASH,EAAaE,GAAG,cAAjC,yBAGA,wBAAQC,QAASF,EAAOC,GAAG,cAA3B,wBC1CKE,EAAgB,SAACC,EAAWC,GACrC,QAAGD,EAAI,GAAKA,GFHiB,MEI1BC,EAAI,GAAKA,GFJiB,IGgBpBC,EAAyB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACpC,EAAwBC,mBAAqBD,EAAYd,SAAzD,mBAAOd,EAAP,KAAa8B,EAAb,KACA,EAAsCD,mBAAiB,GAAvD,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAsCH,mBAAiB,GAAvD,mBAAOI,EAAP,KAAoBC,EAApB,KA6BMC,EAAc,SAACC,GACjB,IAAIV,EAAIO,EACJR,EAAIM,GAEoB,IAAzBhB,EAAKsB,QAAQD,EAAEE,MACdR,GAAQ,SAAAS,GAAS,OAAIA,EAAUC,KAC3B,SAACC,EAAK5C,GAAN,OAAY4C,EAAID,KACZ,SAACE,EAAM5C,GACH,OAAGD,IAAM4B,GAAK3B,IAAM4B,EACTiB,SAASP,EAAEE,KAEVI,WAM5B,IAAME,ECjE2B,SAACR,EAAkBX,EAAWC,GACnE,MAAa,eAAVU,EAAEE,KAAkC,MAAVF,EAAEE,KAAyB,MAAVF,EAAEE,IACrC,EAEE,cAAVF,EAAEE,KAAiC,MAAVF,EAAEE,KAClB,EAEL,ED0DqBO,CAAyBT,GACzB,IAApBQ,GACGpB,EAAcC,EAAGC,EAAIkB,IACpBV,GAAe,SAAAK,GAAS,OAAIA,EAAYK,KAIhD,IAAME,EC9DwB,SAACV,EAAkBX,EAAWC,GAChE,MAAa,cAAVU,EAAEE,KAAiC,MAAVF,EAAEE,IACnB,EAEE,YAAVF,EAAEE,KAA+B,MAAVF,EAAEE,KAChB,EAEL,EDuDmBS,CAAuBX,GACvB,IAAlBU,GACGtB,EAAcC,EAAIqB,EAAepB,IAChCM,GAAe,SAAAO,GAAS,OAAIA,EAAYO,MAYpD,OAPAE,qBAAU,WAEN,OADAC,SAASC,iBAAiB,UAAYf,GAC/B,WACLc,SAASE,oBAAoB,UAAWhB,MAE3C,CAACF,EAAaF,IAEV,sBAAKT,GAAG,cAAR,UACH,qBAAKA,GAAG,kBAAR,SACI,qBAAKA,GAAG,QAAR,SAEItB,EAAKwC,KAAI,SAACvB,EAAMQ,GAAP,OACLR,EAAKuB,KAAI,SAACE,EAAMhB,GAAP,OAAa,cAAC,EAAD,CAAiClC,IAAKkD,EAAMjD,IAAK,CAACgC,EAAGC,GAAIhC,aAAc,CAACqC,EAAaE,IH5F9F,EG4FqBR,EAAkBC,aAKhE,cAAC,IAAD,CACQ0B,SAAS,gBACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAEpB,cAAC,EAAD,CAAcxC,YAnFE,WAChB,GEvBuB,SAACpB,GAC5B,IAAMa,EAAWb,EAAKc,QAClB+C,GAAQ,EAeZ,OAbAhD,EAASC,QAAQgD,SAAQ,SAACrB,EAAK5C,GAAN,OACrB4C,EAAIqB,SAAQ,SAACpB,EAAM5C,GACf,GAAY,IAAT4C,EAAY,CACX,IAAMqB,EAAa/D,EAAKH,GAAGC,GAC3Be,EAAShB,GAAGC,IAAM,EACdF,EAASC,EAAGC,ELZC,EKYae,EAAUkD,KACpCF,GAAQ,GAEZhD,EAAShB,GAAGC,GAAKiE,SAKtBF,EFMAG,CAAgBhE,GAAO,CACtB,IAAMiE,EAAarD,EH3BE,EG2BsBZ,GAC3C8B,GAAQ,SAAAS,GAAS,OAAIA,EAAUC,KAAI,SAACvB,EAAMQ,GAAP,OACnCR,EAAKuB,KAAI,SAACE,EAAMhB,GAAP,OACLuC,EAAWxC,GAAGC,iBAGlBwC,YAAM,yCAAgC,CAClCd,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXQ,cAAUC,EACVC,KAAM,WAmE0BhD,MAvF1B,WACdS,GAAQ,SAAAS,GAAS,OAAIA,EAAUC,KAAI,SAAAvB,GAAI,OAAIA,EAAKuB,KAAI,SAAAE,GAAI,OAAI,kBGTrD4B,G,MARO,WACpB,OACE,qBAAK3E,UAAU,MAAf,SACE,cAAC,EAAD,CAAOiC,YAAaZ,UCMXuD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASkC,eAAe,SAM1BZ,M","file":"static/js/main.78b94788.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/cell.scss';\n\ninterface Props {\n    num: number | null;\n    selectedCell: [number, number],\n    idx: [number, number],\n}\n\nexport const Cell: React.FC<Props> = ({num, idx, selectedCell}) => {\n    return (selectedCell[0] === idx[0] && selectedCell[1] === idx[1])\n    ? <div className=\"cell selected\">{\n        num === 0 ? \"\": num \n    }</div> \n    : <div className=\"cell\"> {\n        num === 0 ? \"\": num    \n    }</div>;\n}","export function canPlace(i: number, j: number, n: number, grid:number[][], tobePlaced: number): boolean {\n    // check row and col\n    for (let k: number = 0; k < n; k++) {\n        if(grid[i][k] === tobePlaced || grid[k][j] === tobePlaced) return false;\n    }\n\n    let x = Math.sqrt(n);\n    let startRow: number = Math.floor(i / x) * x;\n    let startCol: number = Math.floor(j / x) * x;\n    for (let p = startRow; p < startRow + x; p++) {\n        for (let q = startCol; q < startCol + x; q++) {\n            if(grid[p][q] === tobePlaced) return false;\n        }\n    }\n\n    return true;\n}\n\nfunction sudokuHelper(i: number, j: number, n: number, grid:number[][]): boolean {\n    // base case\n    if(i >= n) {\n        return true;\n    }\n\n    // if reached end of the column move to next row\n    if(j >= n) {\n        return sudokuHelper(i + 1, 0, n, grid);\n    }\n    // recursive case\n    // if the current cell is empty, try to fill it\n    if(grid[i][j] === 0) {\n        for (let k = 1; k <= n; k++) {\n            if(canPlace(i, j, n, grid, k)) {\n                grid[i][j] = k;\n                let solveKarPaye: boolean = sudokuHelper(i, j + 1, n, grid);\n                if(solveKarPaye) return true;\n            }\n        }\n        // backtracking step\n        grid[i][j] = 0;\n        return false;\n    } else {\n        return sudokuHelper(i, j + 1, n, grid);\n    }\n}\n\nexport const sudokuSolver = (n: number, grid: number[][]): number[][] => {\n    let gridCopy = grid.slice();\n    sudokuHelper(0, 0, n, gridCopy);\n    return gridCopy;\n}","export const GRID_SIZE: number = 9;\n\nexport const nums = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\nexport const createDefaultGrid: () => number[][] = () => {\n    const rows: number[] = [];\n    const grid: number[][] = [];    \n\n    for (let i = 0; i < GRID_SIZE; i++) { \n        rows.push(0);\n    }\n\n    for (let i = 0; i < GRID_SIZE; i++) { \n        grid.push(rows.slice());\n    }\n\n    return grid;\n}\n","import React from 'react';\nimport '../styles/controlPanel.scss';\n\ninterface Props {\n    handleSolve: () => void;\n    reset: () => void;\n}\n\nexport const ControlPanel: React.FC<Props> = ({handleSolve, reset}) => {\n    return (<div id=\"control-panel\">\n        <h1 className=\"title\">Sudoku Solver</h1>\n        <br />\n        <article>\n            <h2>Controls</h2>\n            <br/>\n            <span className=\"controls-desc\">\n                <div className=\"controls-box\">\n                    <kbd>↑</kbd> <span className=\"kbd-text-middle\">or</span> <kbd>↓</kbd>\n                    <br /><br />\n                    <span >to move Vertically</span>\n                </div>\n                <br /><br /><br />\n                <div className=\"controls-box\">\n                    <kbd>←</kbd> <span className=\"kbd-text-middle\">or</span> \n                    <kbd>→</kbd><span className=\"kbd-text-middle\">or</span> <kbd>Space</kbd>\n                    <br /><br />\n                    <span >to move Horizontally</span>\n                </div>\n                <br/><br/>\n                <div className=\"controls-box\" >\n                    Press any number to set value\n                    <p className=\"small-note\">\n                        <br/>\n                        PS: \n                        Currently site is best viewed on desktop, \n                        <br/>\n                        controls for mobile devices coming soon\n                    </p>\n                </div>\n            </span>\n        </article>\n        <button onClick={handleSolve} id=\"solveButton\">\n            Solve Board    \n        </button>\n        <button onClick={reset} id=\"solveButton\">\n            Clear    \n        </button>\n    </div>);\n}","import { GRID_SIZE } from \"./createDefaultGrid\";\n\nexport const validMovement = (r: number, c: number): boolean => {\n    if(r < 0 || r >= GRID_SIZE) return false;\n    if(c < 0 || c >= GRID_SIZE) return false;\n    return true;\n}","import React, {useState, useEffect} from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {Cell} from './cell';\nimport '../styles/board.scss';\nimport { sudokuSolver } from '../utils/sudokuSolver';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { GRID_SIZE, nums } from '../utils/createDefaultGrid';\nimport {validateProblem} from '../utils/validateProblem';\nimport { ControlPanel } from './controlPanel';\nimport {validMovement} from '../utils/validMovement';\nimport { handleHorizontalMovement, handleVerticalMovement } from '../utils/controls';\n\ninterface Props {\n    gridDefault : number[][];\n}\n\nexport const Board: React.FC<Props> = ({gridDefault}) => {\n    const [grid, setGrid] = useState<number[][]>(gridDefault.slice());\n    const [selectedRow, setSelectedRow] = useState<number>(0);\n    const [selectedCol, setSelectedCol] = useState<number>(0);\n\n    const clearGrid = () => {\n        setGrid(prevState => prevState.map(rows => rows.map(item => 0)));\n    }\n\n    const handleSolve = () => {\n        if(validateProblem(grid)) {\n            const solvedGrid = sudokuSolver(GRID_SIZE, grid);\n            setGrid(prevState => prevState.map((rows, r) =>  \n            rows.map((item, c) => \n                solvedGrid[r][c]\n            )));\n        } else {\n            toast('⚠️ Invalid problem statement', {\n                position: \"bottom-center\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                type: \"error\",\n                });\n        }\n    }\n    \n    \n    \n    const handlePress = (e: KeyboardEvent): void => {\n        let c = selectedCol;\n        let r = selectedRow;\n        \n        if(nums.indexOf(e.key) !== -1) {\n            setGrid(prevState => prevState.map(\n                (row, i) => row.map(\n                    (item, j) => {\n                        if(i === r && j === c) {\n                            return parseInt(e.key);\n                        }\n                        else return item;\n                    }\n                )\n            ))        \n        }\n        \n        const horizontalValue = handleHorizontalMovement(e, r, c);\n        if( horizontalValue !== 0) {\n            if(validMovement(r, c + horizontalValue)) {\n                setSelectedCol(prevState => prevState + horizontalValue);\n            }\n        }\n\n        const verticalValue = handleVerticalMovement(e, r, c);\n        if( verticalValue !== 0) {\n            if(validMovement(r + verticalValue, c)) {\n                setSelectedRow(prevState => prevState + verticalValue);\n            }\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\",  handlePress);\n        return () => {\n          document.removeEventListener(\"keydown\", handlePress);\n        }\n    }, [selectedCol, selectedRow]);\n\n    return <div id='board-outer'>\n        <div id=\"board-container\">\n            <div id=\"board\">\n            {\n                grid.map((rows, r) => \n                    rows.map((item, c) => <Cell key={(r * GRID_SIZE ) + c} num={item} idx={[r, c]} selectedCell={[selectedRow, selectedCol]} />)\n                )\n            }\n            </div>\n        </div>\n        <ToastContainer\n                position=\"bottom-center\"\n                autoClose={5000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n        />\n        <ControlPanel handleSolve={handleSolve} reset={clearGrid} />\n    </div>;\n};\n"," export const handleHorizontalMovement = (e: KeyboardEvent, r: number, c: number):number => {\n    if(e.key === \"ArrowRight\" || e.key === \"d\" || e.key === \" \") {\n        return 1;\n    }\n    if(e.key === \"ArrowLeft\" || e.key === \"a\") {\n        return -1;\n    }\n    return 0;\n}\n\nexport const handleVerticalMovement = (e: KeyboardEvent, r: number, c: number):number => {\n    if(e.key === \"ArrowDown\" || e.key === \"s\") {\n        return 1;\n    }\n    if(e.key === \"ArrowUp\" || e.key === \"w\") {\n        return -1;\n    }\n    return 0;\n}","import { canPlace } from \"./sudokuSolver\";\nimport { GRID_SIZE } from \"./createDefaultGrid\";\n\nexport const validateProblem = (grid: number[][]): boolean => {\n    const gridCopy = grid.slice();\n    let valid = true;\n\n    gridCopy.slice().forEach((row, i) => \n        row.forEach((item, j) => {\n            if(item !== 0) {\n                const toBePlaced = grid[i][j];\n                gridCopy[i][j] = -1;\n                if(!canPlace(i, j, GRID_SIZE, gridCopy, toBePlaced)) {\n                    valid = false;\n                }\n                gridCopy[i][j] = toBePlaced;\n            }\n        })\n    )\n\n    return valid;\n}","import React from 'react';\nimport {Board} from './components/board';\nimport './App.scss';\nimport {createDefaultGrid} from './utils/createDefaultGrid';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Board gridDefault={createDefaultGrid()} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}